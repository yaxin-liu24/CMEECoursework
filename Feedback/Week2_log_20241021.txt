Starting code feedback for Yaxin, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.53 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week1, Feedback, week3, .git

Found the following files in parent directory: README.md

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
my CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
Project name / title

    WEEK2 practicals in python

Brief description: 

    This project is designed to focuses on various practical exercises in Python, including list comprehensions, control flows, and DNA sequence alignment. It aims to help users improve their coding skills through hands-on tasks.

Languages: 

    Python (3.0)

Dependencies: 

    ipdb (for debugging)
    os: provides a way to use operating system-dependent functionality, such as file path manipulation and directory creation.
    sys: This module provides access to command-line arguments and system-specific parameters.
    re: This module is used for regular expression operations, allowing pattern matching in strings.
    csv: This module provides functionality for reading from and writing to CSV (Comma-Separated Values) files.

Installation: Guidelines for installing the project (if applicable), including dependencies.

    1.Clone the repository
    2.Navigate to the project directory
    3.Install the dependencies if required

Project structure and Usage: 

code/: Contains the practical exercises
data/: Contains the data that applyed in codes
results/: store the results of the codes
sandbox/: Contains some excierses and draft

Author name and contact
    Yaxin  yaxin.liu24@imperial.ac.uk

**********************************************************************

Found following files in results directory: README.md...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 98.5

Found 7 code files: lc2.py, oaks_debugme.py, lc1.py, tuple.py, align_seqs.py, dictionary.py, cfexercises1.py

Found the following extra files: csv, sys, README.md, os
0.5 pt deducted per extra file

Current Points = 96.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
rain_list = [(month, amount) for month, amount in rainfall if amount > 100]
print(rain_list)
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
rainfall_list = [month for month, amount in rainfall if amount < 50]
print(rainfall_list)
# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 
rainfall_high=[]
rainfall_low=[]
for (month,amount) in rainfall:
    if amount > 100:
        rainfall_high.append((month,amount))
    if amount < 50:
        rainfall_low.append(month)
    print(rainfall_high)
    print(rainfall_low)


# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4)]
[]
[('JAN', 111.4), ('FEB', 126.1)]
[]
[('JAN', 111.4), ('FEB', 126.1)]
['MAR']
[('JAN', 111.4), ('FEB', 126.1)]
['MAR']
[('JAN', 111.4), ('FEB', 126.1)]
['MAR']
[('JAN', 111.4), ('FEB', 126.1)]
['MAR']
[('JAN', 111.4), ('FEB', 126.1)]
['MAR']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2)]
['MAR']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB'
**********************************************************************

Code ran without errors

Time consumed = 0.02932s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
# sys: This module provides access to command-line arguments and system-specific parameters.
# re: This module is used for regular expression operations, allowing pattern matching in strings.
# csv: This module provides functionality for reading from and writing to CSV (Comma-Separated Values) files.
import sys
import re
import csv

# checks if a given name is likely an oak species (genus Quercus).
def is_an_oak(name):

# Docstring: Provides examples of how the function works using doctest, which allows for easy testing of functions.
# The function will return True for names like "Quercus robur" and "Quercuss robur", while returning False for names like "Fraxinus excelsior".
    """
    Returns True if the name is likely an oak (genus Quercus), False otherwise.
    
    >>> is_an_oak('Quercus robur')
    True
    >>> is_an_oak('Fraxinus excelsior')
    False
    >>> is_an_oak('Quercuss robur')
    True
    >>> is_an_oak('Quercuus robur')
    True
    """
# r'Querc[us]{2,3}\b' checks if the name starts with "Querc" followed by either two or three 'u's or 's' (e.g., "Quercus" or "Quercuss") and is followed by a word boundary (\b).
# The re.IGNORECASE flag allows the matching to be case-insensitive.
# return bool(re.match(r'Querc[us]{2,3}\b', name, re.IGNORECASE))

def main(argv):
# Reads a CSV file containing taxa data, checks each entry to see if it is an oak, and writes the oak entries to a new CSV file.
    with open('../data/TestOaksData.csv', 'r') as f, open('../results/JustOaksData.csv', 'w') as g:
        taxa = csv.reader(f)
        csvwrite = csv.writer(g)
        csvwrite.writerow(next(taxa))  # Write header
        
        oaks = set()
        for row in taxa:
# Calls is_an_oak with the first column of the row (row[0]).
# If it returns True, prints a message indicating an oak was found, writes the entire row to the output file, and adds the oak name to the oaks set.
            if is_an_oak(row[0]):
                print(f'FOUND AN OAK: {row[0]}')
                csvwrite.writerow(row)
                oaks.add(row[0])
        
        print(f"Found {len(oaks)} oak species: {', '.join(oaks)}")
        
# Imports doctest and runs doctest.testmod(), which checks that the examples in the docstrings of the functions behave as documented.
# Calls the main function, passing in command-line arguments (sys.argv).
if __name__ == "__main__":
    import doctest
    doctest.testmod()
    main(sys.argv)

**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
**********************************************************************
File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YaxinLiu_yl13424/week2/code/oaks_debugme.py", line 16, in __main__.is_an_oak
Failed example:
    is_an_oak('Quercus robur')
Expected:
    True
Got nothing
**********************************************************************
File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YaxinLiu_yl13424/week2/code/oaks_debugme.py", 
**********************************************************************

Code ran without errors

Time consumed = 0.09794s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 
#1.
latin_name=[ name[0] for name in birds]
common_name=[ name[1] for name in birds]
mean_body_masses=[ mean[2] for mean in birds]
print(latin_name)
print(common_name)
print(mean_body_masses)
# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
latin=[]
common=[]
mean=[]
# for bird in birds:
#     latin.append(bird[0])
#     common.append(bird[1])
#     mean.append(bird[2])
index=0
while index<len(birds):
    item=birds[index]
    latin.append(item[0])
    common.append(item[1])
    mean.append(item[2])
    index +=1
print(latin)
print(common)
print(mean)
# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.04133s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.
for latin_name, common_name, mass in birds:
#f"" :f-string,to embed expressions inside string literals, making it easy to create dynamic strings.
    print(f"Species: {latin_name}, Common Name: {common_name}, Mass: {mass} ")

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 89.5

Output (only first 500 characters): 


**********************************************************************
Species: Passerculus sandwichensis, Common Name: Savannah sparrow, Mass: 18.7 
Species: Delichon urbica, Common Name: House martin, Mass: 19 
Species: Junco phaeonotus, Common Name: Yellow-eyed junco, Mass: 19.5 
Species: Junco hyemalis, Common Name: Dark-eyed junco, Mass: 19.6 
Species: Tachycineata bicolor, Common Name: Tree swallow, Mass: 20.2 

**********************************************************************

Code ran without errors

Time consumed = 0.03746s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#os: provides a way to use operating system-dependent functionality, such as file path manipulation and directory creation.
import os
# Reads the first two non-empty lines from a specified file, treating them as sequences.
def read_sequences(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        seq1 = file.readline().strip()
        seq2 = file.readline().strip()
        if not seq1 or not seq2:
# Checks if either sequence is empty and raises a ValueError if so
            raise ValueError("File must contain at least two sequences.")
        return seq1, seq2
# Compares two sequences starting from a given index and returns a string indicating matches and a score.
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = ""
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]:
# appends * to matched and increments the score. If not, appends -
                matched += "*"
                score += 1
            else:
                matched += "-"
    return matched, score
# Finds the best alignment of seq1 and seq2 by shifting seq2 across seq1 and calculating the score.
def find_best_alignment(seq1, seq2):
    l1, l2 = len(seq1), len(seq2)
    s1, s2 = seq1, seq2
    if l1 < l2:
        s1, s2 = s2, s1
        l1, l2 = l2, l1
    
    my_best_align = None
    my_best_score = -1
# Calls calculate_score for each position and updates the best alignment and score if the current score is higher.
    for i in range(l1 - l2 + 1):
        matched, score = calculate_score(s1, s2, l1, l2, i)
        if score > my_best_score:
            my_best_align = "." * i + s2
            my_best_score = score
    
    return my_best_align, s1 if l1 >= len(seq1) else seq2, my_best_score

# Opens the specified output file in write mode.
# Writes the best alignment, the sequence, and the best score in a structured format.
def write_output(best_align, seq1, best_score, output_filename):
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write("Best alignment:\n")
        f.write(best_align + "\n")
        f.write(seq1 + "\n")
        f.write(f"Best score: {best_score}\n")

# This block runs when the script is executed directly.
# Sets input and output directory paths.
# Uses os.makedirs to ensure the output directory exists.
# Constructs the full output file path.
# Calls read_sequences to get the two sequences from the input file.
# Calls find_best_alignment to compute the best alignment.
# Calls write_output to save the results.
# Catches and prints any exceptions that occur during the process.
if __name__ == "__main__":
    input_dir = '../data'
    input_filename = os.path.join(input_dir, 'sequences.csv')
    output_dir = '../results'
    output_filename = 'best_alignment.txt'
    
    # Create the output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Construct the full path for the output file
    output_path = os.path.join(output_dir, output_filename)
    
    try:
        seq1, seq2 = read_sequences(input_filename)
        best_align, seq1, best_score = find_best_alignment(seq1, seq2)
        write_output(best_align, seq1, best_score, output_path)
        print(f"Best alignment saved to '{output_path}'.")
    except Exception as e:
        print(f"An error occurred: {e}")

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 85.5

Output (only first 500 characters): 


**********************************************************************
Best alignment saved to '../results/best_alignment.txt'.

**********************************************************************

Code ran without errors

Time consumed = 0.04921s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

#### Your solution here #### 
# taxa_dic = {}
# for (animal, category) in taxa:
#     if category in taxa_dic:
#         taxa_dic[category].add(animal)
#     else:
#         taxa_dic[category] = {animal}
# print(taxa_dic)

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### Your solution here #### 
from collections import defaultdict
# Using defaultdict to create a dictionary of sets
taxa_dic = defaultdict(set)

# Populate the dictionary using list comprehension
{taxa_dic[category].add(animal) for animal, category in taxa}

# Print the resulting dictionary
print(dict(taxa_dic))
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 83.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Cleithrionomys rutilus', 'Mus domesticus', 'Peromyscus crinitus', 'Gerbillus henleyi'}, 'Afrosoricida': {'Microgale talazaci', 'Microgale dobsoni'}, 'Carnivora': {'Canis lupus', 'Lyacon pictus', 'Arctocephalus gazella'}}

**********************************************************************

Code ran without errors

Time consumed = 0.04243s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
# Calculate the square root of a given number.
# Args:
# x (float): The number to calculate the square root of.
# Returns:
# float: The square root of the input number.
def foo_1(x):
    return x ** 0.5

# Return the larger of two numbers.
# Args:
# x (float): The first number.
# y (float): The second number.
# Returns:
# float: The larger of the two input numbers.
def foo_2(x, y):
    if x > y:
        return x
    return y

# Sort three numbers in ascending order.
# Args:
# x (float): The first number.
# y (float): The second number.
# z (float): The third number.
# Returns:
# list: A list containing the three numbers sorted in ascending order.
def foo_3(x, y, z):
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

# Calculate the factorial of a given non-negative integer using an iterative approach.
# Args:
# x (int): The non-negative integer to calculate the factorial of.
# Returns:
# int: The factorial of the input number.
def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result *= i
    return result


# Calculate the factorial of a given non-negative integer using recursion.
# Args:
# x (int): The non-negative integer to calculate the factorial of.
# Returns:
# int: The factorial of the input number.
    
def foo_5(x):  # a recursive function that calculates the factorial of x
    if x == 1:
        return 1
    return x * foo_5(x - 1)


# Calculate the factorial of a given non-negative integer using a while loop.
# Args:
# x (int): The non-negative integer to calculate the factorial of.
# Returns:
# int: The factorial of the input number.
def foo_6(x):  # Calculate the factorial of x in a different way; no if statement involved
    facto = 1
    while x >= 1:
        facto *= x
        x -= 1
    return facto

# Main function to execute user interactions and demonstrate the functionality of other functions.
# Prompts the user for input for each function and prints the corresponding output.
def main():
    # User inputs for each function
    x1 = float(input("Enter a number for square root calculation: "))
    print(f"Square root of {x1}: {foo_1(x1)}")
    
    x2 = float(input("Enter the first number to compare: "))
    y2 = float(input("Enter the second number to compare: "))
    print(f"Largest number between {x2} and {y2}: {foo_2(x2, y2)}")
    
    x3 = float(input("Enter the first number for sorting: "))
    y3 = float(input("Enter the second number for sorting: "))
    z3 = float(input("Enter the third number for sorting: "))
    print(f"Sorted numbers: {foo_3(x3, y3, z3)}")
    
    x4 = int(input("Enter a number to calculate factorial (iterative): "))
    print(f"Factorial of {x4} (iterative): {foo_4(x4)}")
    
    x5 = int(input("Enter a number to calculate factorial (recursive): "))
    print(f"Factorial of {x5} (recursive): {foo_5(x5)}")
    
    x6 = int(input("Enter a number to calculate factorial (while loop): "))
    print(f"Factorial of {x6} (while loop): {foo_6(x6)}")

if __name__ == "__main__":
    main()
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 78.0

Output (only first 500 characters): 


**********************************************************************
Enter a number for square root calculation: 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YaxinLiu_yl13424/week2/code/cfexercises1.py", line 100, in <module>
    main()
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2024-25/Coursework/StudentRepos/YaxinLiu_yl13424/week2/code/cfexercises1.py", line 78, in main
    x1 = float(input("Enter a number for square root calculation: "))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
EOFError: EOF when reading a line

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 78.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!